<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Duke's 的技术博客]]></title>
  <subtitle><![CDATA[记录、分享、探讨、进步]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.idukemou.com/"/>
  <updated>2015-05-02T15:11:22.000Z</updated>
  <id>http://blog.idukemou.com/</id>
  
  <author>
    <name><![CDATA[Duke]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[[iOS]MVVM-框架介绍]]></title>
    <link href="http://blog.idukemou.com/2015/05/02/%5BiOS%5DMVVM-%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/"/>
    <id>http://blog.idukemou.com/2015/05/02/[iOS]MVVM-框架介绍/</id>
    <published>2015-05-02T15:00:14.000Z</published>
    <updated>2015-05-02T15:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>我于 2011 年在 500px 找到自己的第一份 iOS 开发工作。虽然我已经在大学里做了好几年 iOS 外包开发，但这才是我的一个真正的 iOS 开发工作。我被作为唯一的 iOS 开发者被招聘去实现拥有漂亮设计的 iPad 应用。在短短七周里，我们就发布了 1.0 并持续迭代，添加了更多特性，但从本质上，代码库也变得更加复杂了。<br><a id="more"></a></p>
<p>有时我感觉就像我不知道在做什么。虽然我知道自己的设计模式——就像任何好的编程人员那样 —— 但我太接近我在做的产品以至于不能客观地衡量我的架构决策的有效性。当队伍中来了另外一位开发者时，我意识到我们陷入困境了。</p>
<p>从没听过 MVC ？有人称之为 Massive View Controller（重量级视图控制器），这就是我们那时候的感觉。我不打算介绍令人汗颜的细节，但说实在的，如果我不得不再次重来一次，我绝对会做出不同的决策。</p>
<p>我会修改一个关键架构，并将其带入我从那时起就在开发的各种应用，即使用一种叫做 Model-View-ViewModel 的架构替换 Model-View-Controller。</p>
<p>所以，MVVM 到底是什么？与其专注于说明 MVVM 的来历，不如让我们看一个典型的 iOS 是如何构建的，并从那里了解 MVVM：<br><img src="/images/MVVM/mvvm1.png" class="center"><br>我们看到的是一个典型的 MVC 设置。Model 呈现数据，View 呈现用户界面，而 View Controller 调节它两者之间的交互。Cool！</p>
<p>稍微考虑一下，虽然 View 和 View Controller 是技术上不同的组件，但它们几乎总是手牵手在一起，成对的。你什么时候看到一个 View 能够与不同 View Controller 配对？或者反过来？所以，为什么不正规化它们的连接呢？<br><img src="/images/MVVM/intermediate.png" class="center"><br>这更准确地描述了你可能已经编写的 MVC 代码。但它并没有做太多事情来解决 iOS 应用中日益增长的重量级视图控制器的问题。在典型的 MVC 应用里，许多逻辑被放在 View Controller 里。它们中的一些确实属于 View Controller，但更多的是所谓的“表示逻辑（presentation logic）”，以 MVVM 属术语来说，就是那些将 Model 数据转换为 View 可以呈现的东西的事情，例如将一个 NSDate 转换为一个格式化过的 NSString。</p>
<p>我们的图解里缺少某些东西，那些使我们可以把所有表示逻辑放进去的东西。我们打算将其称为 “View Model” —— 它位于 View/Controller 与 Model 之间：<br><img src="/images/MVVM/mvvm.png" class="center"><br>看起好多了！这个图解准确地描述了什么是 MVVM：一个 MVC 的增强版，我们正式连接了视图和控制器，并将表示逻辑从 Controller 移出放到一个新的对象里，即 View Model。MVVM 听起来很复杂，但它本质上就是一个精心优化的 MVC 架构，而 MVC 你早已熟悉。</p>
<p>现在我们知道了什么是 MVVM，但为什么我们会想要去使用它呢？在 iOS 上使用 MVVM 的动机，对我来说，无论如何，就是它能减少 View Controller 的复杂性并使得表示逻辑更易于测试。通过一些例子，我们将看到它如何达到这些目标。</p>
<p>此处有三个重点是我希望你看完本文能带走的：</p>
<p>MVVM 可以兼容你当下使用的 MVC 架构。<br>MVVM 增加你的应用的可测试性。<br>MVVM 配合一个绑定机制效果最好。<br>如我们之前所见，MVVM 基本上就是 MVC 的改进版，所以很容易就能看到它如何被整合到现有使用典型 MVC 架构的应用中。让我们看一个简单的 Person Model 以及相应的 View Controller：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">- (instancetype)initwithSalutation:(<span class="built_in">NSString</span> *)salutation firstName:(<span class="built_in">NSString</span> *)firstName lastName:(<span class="built_in">NSString</span> *)lastName birthdate:(<span class="built_in">NSDate</span> *)birthdate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *salutation;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *firstName;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *lastName;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSDate</span> *birthdate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p>
<p>Cool！现在我们假设我们有一个 PersonViewController ，在 viewDidLoad 里，只需要基于它的 model 属性设置一些 Label 即可。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.model</span><span class="variable">.salutation</span><span class="variable">.length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.nameLabel</span><span class="variable">.text</span> = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@ %@ %@"</span>, <span class="keyword">self</span><span class="variable">.model</span><span class="variable">.salutation</span>, <span class="keyword">self</span><span class="variable">.model</span><span class="variable">.firstName</span>, <span class="keyword">self</span><span class="variable">.model</span><span class="variable">.lastName</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.nameLabel</span><span class="variable">.text</span> = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@ %@"</span>, <span class="keyword">self</span><span class="variable">.model</span><span class="variable">.firstName</span>, <span class="keyword">self</span><span class="variable">.model</span><span class="variable">.lastName</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];</span><br><span class="line">    [dateFormatter setDateFormat:<span class="string">@"EEEE MMMM d, yyyy"</span>];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.birthdateLabel</span><span class="variable">.text</span> = [dateFormatter stringFromDate:model<span class="variable">.birthdate</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这全都直截了当，标准的 MVC。现在来看看我们如何用一个 View Model 来增强它。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PersonViewModel</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">- (instancetype)initWithPerson:(Person *)person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) Person *person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *nameText;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *birthdateText;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p>
<p>我们的 View Model 的实现大概如下：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">PersonViewModel</span></span></span><br><span class="line"></span><br><span class="line">- (instancetype)initWithPerson:(Person *)person &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">    _person = person;</span><br><span class="line">    <span class="keyword">if</span> (person<span class="variable">.salutation</span><span class="variable">.length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        _nameText = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@ %@ %@"</span>, <span class="keyword">self</span><span class="variable">.person</span><span class="variable">.salutation</span>, <span class="keyword">self</span><span class="variable">.person</span><span class="variable">.firstName</span>, <span class="keyword">self</span><span class="variable">.person</span><span class="variable">.lastName</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _nameText = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@ %@"</span>, <span class="keyword">self</span><span class="variable">.person</span><span class="variable">.firstName</span>, <span class="keyword">self</span><span class="variable">.person</span><span class="variable">.lastName</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];</span><br><span class="line">    [dateFormatter setDateFormat:<span class="string">@"EEEE MMMM d, yyyy"</span>];</span><br><span class="line">    _birthdateText = [dateFormatter stringFromDate:person<span class="variable">.birthdate</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p>
<p>Cool！我们已经将 viewDidLoad 中的表示逻辑放入我们的 View Model 里了。此时，我们新的 viewDidLoad 就会非常轻量：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.nameLabel</span><span class="variable">.text</span> = <span class="keyword">self</span><span class="variable">.viewModel</span><span class="variable">.nameText</span>;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.birthdateLabel</span><span class="variable">.text</span> = <span class="keyword">self</span><span class="variable">.viewModel</span><span class="variable">.birthdateText</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>所以，如你所见，并没有对我们的 MVC 架构做太多改变。还是同样的代码，只不过移动了位置。它与 MVC 兼容，带来更轻量的 View Controllers。</p>
<p>可测试，嗯？是怎样？好吧，View Controller 是出了名的难以测试，因为它们做了太多事情。在 MVVM 里，我们试着尽可能多的将代码移入 View Model 里。测试 View Controller 就变得容易多了，因为它们不再做一大堆事情，并且 View Model 也非常易于测试。让我们来看看：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">SpecBegin(Person)</span><br><span class="line">    <span class="built_in">NSString</span> *salutation = <span class="string">@"Dr."</span>;</span><br><span class="line">    <span class="built_in">NSString</span> *firstName = <span class="string">@"first"</span>;</span><br><span class="line">    <span class="built_in">NSString</span> *lastName = <span class="string">@"last"</span>;</span><br><span class="line">    <span class="built_in">NSDate</span> *birthdate = [<span class="built_in">NSDate</span> dateWithTimeIntervalSince1970:<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    it (<span class="string">@"should use the salutation available. "</span>, ^&#123;</span><br><span class="line">        Person *person = [[Person alloc] initWithSalutation:salutation firstName:firstName lastName:lastName birthdate:birthdate];</span><br><span class="line">        PersonViewModel *viewModel = [[PersonViewModel alloc] initWithPerson:person];</span><br><span class="line">        expect(viewModel<span class="variable">.nameText</span>)<span class="variable">.to</span><span class="variable">.equal</span>(<span class="string">@"Dr. first last"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it (<span class="string">@"should not use an unavailable salutation. "</span>, ^&#123;</span><br><span class="line">        Person *person = [[Person alloc] initWithSalutation:<span class="literal">nil</span> firstName:firstName lastName:lastName birthdate:birthdate];</span><br><span class="line">        PersonViewModel *viewModel = [[PersonViewModel alloc] initWithPerson:person];</span><br><span class="line">        expect(viewModel<span class="variable">.nameText</span>)<span class="variable">.to</span><span class="variable">.equal</span>(<span class="string">@"first last"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it (<span class="string">@"should use the correct date format. "</span>, ^&#123;</span><br><span class="line">        Person *person = [[Person alloc] initWithSalutation:<span class="literal">nil</span> firstName:firstName lastName:lastName birthdate:birthdate];</span><br><span class="line">        PersonViewModel *viewModel = [[PersonViewModel alloc] initWithPerson:person];</span><br><span class="line">        expect(viewModel<span class="variable">.birthdateText</span>)<span class="variable">.to</span><span class="variable">.equal</span>(<span class="string">@"Thursday January 1, 1970"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">SpecEnd</span><br></pre></td></tr></table></figure></p>
<p>如果我们没有将这个逻辑移入 View Model，我们将不得不实例化一个完整的 View Controller 以及伴随的 View，然后去比较我们 View 中 Lable 的值。这样做不只是会变成一个麻烦的间接层，而且它只代表了一个十分脆弱的测试。现在，我们可以按意愿自由地修改视图层级而不必担心破坏我们的单元测试。使用 MVVM 带来的对于测试的好处非常清晰，甚至从这个简单的例子来看也可见一斑，而在有更复杂的表示逻辑的情况下，这个好处会更加明显。</p>
<p>注意到在这个简单的例子中， Model 是不可变的，所以我们可以只在初始化的时候指定我们 View Model 的属性。对于可变 Model，我们还需要使用一些绑定机制，这样 View Model 就能在背后的 Model 改变时更新自身的属性。此外，一旦 View Model 上的 Model 发生改变，那 View 的属性也需要更新。Model 的改变应该级联向下通过 View Model 进入 View。</p>
<p>在 OS X 上，我们可以使用 Cocoa 绑定，但在 iOS 上我们并没有这样好的配置可用。我们想到了 KVO（Key-Value Observation），而且它确实做了很伟大的工作。然而，对于一个简单的绑定都需要很大的样板代码，更不用说有许多属性需要绑定了。作为替代，我个人喜欢使用 ReactiveCocoa，但 MVVM 并未强制我们使用 ReactiveCocoa。MVVM 是一个伟大的典范，它自身独立，只是在有一个良好的绑定框架时做得更好。</p>
<p>我们覆盖了不少内容：从普通的 MVC 派生出 MVVM，看它们是如何相兼容的范式，从一个可测试的例子观察 MVVM，并看到 MVVM 在有一个配对的绑定机制时工作得更好。如果你有兴趣学习更多关于 MVVM 的知识，你可以看看这篇博客，它用更多细节解释了 MVVM 的好处，或者这一篇关于我们如何在最近的项目里使用 MVVM 获得巨大的成功的文章。我同样还有一个经过完整测试，基于 MVVM 的应用，叫做 C-41 ，它是开源的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我于 2011 年在 500px 找到自己的第一份 iOS 开发工作。虽然我已经在大学里做了好几年 iOS 外包开发，但这才是我的一个真正的 iOS 开发工作。我被作为唯一的 iOS 开发者被招聘去实现拥有漂亮设计的 iPad 应用。在短短七周里，我们就发布了 1.0 并持续迭代，添加了更多特性，但从本质上，代码库也变得更加复杂了。<br>]]>
    
    </summary>
    
      <category term="iOS开发" scheme="http://blog.idukemou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://blog.idukemou.com/2015/05/02/hello-world/"/>
    <id>http://blog.idukemou.com/2015/05/02/hello-world/</id>
    <published>2015-05-02T14:33:20.000Z</published>
    <updated>2015-03-04T15:20:32.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[[iOS]响应式编程开发-ReactiveCocoa(一)]]></title>
    <link href="http://blog.idukemou.com/2015/05/02/iOS-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91-ReactiveCocoa-%E4%B8%80/"/>
    <id>http://blog.idukemou.com/2015/05/02/iOS-响应式编程开发-ReactiveCocoa-一/</id>
    <published>2015-05-02T14:32:20.000Z</published>
    <updated>2015-05-02T14:53:27.000Z</updated>
    <content type="html"><![CDATA[<p><strong>什么是响应式编程</strong><br>　　响应式编程是一种面向数据流和变化传播的编程范式。这意味着可以在编程语言中很方便地表达静态或动态的数据流，而相关的计算模型会自动将变化的值通过数据流进行传播。<br><a id="more"></a><br>　　例如，在命令式编程环境中，a:=b+c表示将表达式的结果赋给a，而之后改变b或c的值不会影响a。但在响应式编程中，a的值会随着b或c的更新而更新。<br>电子表格程序就是响应式编程的一个例子。单元格可以包含字面值或类似”=B1+C1”的公式，而包含公式的单元格的值会依据其他单元格的值的变化而变化。</p>
<p>　　响应式编程最初是为了简化交互式用户界面的创建和实时系统动画的绘制而提出来的一种方法，但它本质上是一种通用的编程范式。</p>
<p><strong>什么是ReactiveCocoa</strong></p>
<p>　　ReactiveCocoa (RAC) 是一个Objective-C语言内实现响应式编程的框架。</p>
<p>　　RAC提供了大量的能够完成发送 value’s stream 的API。</p>
<p>　　RAC通过使用信号量(RACSignal)来完成获取当前值和未来值的功能，而不像传统的程序开发一样需要声明大量的变量。</p>
<p>Josh Abernathy这样解释它：</p>
<p>程序接收输入产生输出。输出就是对输入做了一些事的结果。输入，转换，输出，完成。</p>
<p>输入是应用动作的全部来源。点击、键盘事件、定时器事件、GPS时间、网络请求响应都算是输入。这些事件被传递到应用中，应用将他们以某种方式混合，产生了结果：就是输出。</p>
<p>输出通常会改变应用的UI。开关状态变化、列表有了新的元素都是UI变化。也有可能让磁盘上某个文件产生变化，或者产生一个API请求，这都是应用的输出。</p>
<p>但不像传统的输入输出设计，应用的输入输出可以产生很多次。应用打开后，不只是一个简单的 输入→工作→输出 就构成了一个生命周期。应用经常有大量的输入并基于这些输入产生输出。</p>
<p><strong>基本的使用方法</strong></p>
<p>　　例如，我们目前想要实现一个NSString对象可以一直绑定到最新的时间，即使字符串发生了变化，也不应该是再去使用时间去重新赋值了。</p>
<p>　　听起来特别像Objective-C语言内的KVO特性，但是这并不是具有压倒性优势的那个方法:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath ofObject:(<span class="keyword">id</span>)object change:(<span class="built_in">NSDictionary</span> *)change context:(<span class="keyword">void</span> *)context;</span><br></pre></td></tr></table></figure></p>
<p>　　那么我们现在使用RAC框架来实现这个功能</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">***<span class="variable">.h</span></span><br><span class="line"><span class="comment">//用来标识时间变量</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span> ,<span class="keyword">strong</span>) <span class="built_in">NSDate</span> *time;</span><br><span class="line"><span class="comment">//用来标识文字显示区域</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span> ,<span class="keyword">strong</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span> *label;</span><br><span class="line">***<span class="variable">.m</span></span><br><span class="line"><span class="comment">//申请注册一个每个1秒将会在主线程执行一次的信号量</span></span><br><span class="line">RACSignal *repeatSignal = [[RACSignal interval:<span class="number">1</span> onScheduler:[RACScheduler mainThreadScheduler]] repeat];</span><br><span class="line"><span class="comment">//为信号量添加执行代码端</span></span><br><span class="line">[repeatSignal subscribeNext: ^(<span class="built_in">NSDate</span>* time)&#123;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.time</span> = time;</span><br><span class="line">&#125;];</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//申请注册一个时间属性的信号量</span></span><br><span class="line">RACSignal *timeSignal = [<span class="keyword">self</span> rac_valuesForKeyPath:<span class="string">@"time"</span> observer:<span class="keyword">self</span>];</span><br><span class="line"><span class="comment">//为信号量添加执行代码端</span></span><br><span class="line">[timeSignal subscribeNext:^(<span class="built_in">NSDate</span>* time) &#123;</span><br><span class="line">    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];</span><br><span class="line">    [formatter setDateFormat:<span class="string">@"HH:mm:ss"</span>];</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.label</span><span class="variable">.text</span> = [formatter stringFromDate:time];</span><br><span class="line">     </span><br><span class="line">    RELEASESAFELY(formatter);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p>同样和Objective-C语言内的KVO特性不同的是，RACSignal信号量可以进行过滤设置。</p>
<p>　　以上边的例子的话，我们加一个功能。</p>
<p>　　•获取偶数秒的时间</p>
<p>　　那么信号量部分的代码可以写为<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//申请注册一个时间属性的信号量</span></span><br><span class="line">RACSignal *timeSignal = [<span class="keyword">self</span> rac_valuesForKeyPath:<span class="string">@"time"</span> observer:<span class="keyword">self</span>];</span><br><span class="line"><span class="comment">//为信号量添加过滤block</span></span><br><span class="line">[[timeSignal filter:^<span class="built_in">BOOL</span>(<span class="built_in">NSDate</span>* time) &#123;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//获取描述的时间</span></span><br><span class="line">    NSDateComponents *com = [[<span class="built_in">NSCalendar</span> currentCalendar] components:NSCalendarUnitSecond fromDate:time];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> com<span class="variable">.second</span> % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">&#125;] subscribeNext:^(<span class="built_in">NSDate</span>* time) &#123;</span><br><span class="line">    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];</span><br><span class="line">    [formatter setDateFormat:<span class="string">@"HH:mm:ss"</span>];</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.label</span><span class="variable">.text</span> = [formatter stringFromDate:time];</span><br><span class="line">     </span><br><span class="line">    RELEASESAFELY(formatter);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></p>
<p>信号量还可以用来导出对应的状态。与Objective-C语言KVO特性不同的是，RAC能够为新的值设置其他的属性。</p>
<p>那么我们还是举个功能例子</p>
<p>　　•在注册用户时，当用户密码与确认密码相同时，在Label中显示”1”，不相同时，显示”0”;</p>
<p>　　•如图所示<br><img src="/images/reactive/271538086775788.gif" class="center"><br>　　传统方式代码</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)isValid &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">            [<span class="keyword">self</span><span class="variable">.password</span><span class="variable">.text</span> length] &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            [<span class="keyword">self</span><span class="variable">.confirm</span><span class="variable">.text</span> length] &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            [<span class="keyword">self</span><span class="variable">.password</span><span class="variable">.text</span> isEqual:<span class="keyword">self</span><span class="variable">.confirm</span><span class="variable">.text</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="preprocessor">#pragma mark - UITextFieldDelegate</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)textField:(UITextField *)textField</span><br><span class="line">shouldChangeCharactersInRange:(<span class="built_in">NSRange</span>)range</span><br><span class="line">replacementString:(<span class="built_in">NSString</span> *)string</span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.label</span><span class="variable">.text</span> = @(<span class="keyword">self</span><span class="variable">.isValid</span>)<span class="variable">.description</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们发现逻辑被放在了很多方法里，零碎地摆放在view controller里，通过到处散布到delegate里的self.label.text = @(self.isValid).description;</p>
<p>方法在页面的生命周期中被调用。</p>
<p>　　那么RAC实现方式的代码</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">RACSignal *passworkSignal = <span class="keyword">self</span><span class="variable">.password</span><span class="variable">.rac_textSignal</span>;</span><br><span class="line">RACSignal *confirmSignal = <span class="keyword">self</span><span class="variable">.confirm</span><span class="variable">.rac_textSignal</span>;</span><br><span class="line"> </span><br><span class="line">RACSignal *combineSignal = [RACSignal combineLatest:@[passworkSignal,confirmSignal] reduce:^(<span class="built_in">NSString</span> *password, <span class="built_in">NSString</span> *confirm)&#123;</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">return</span> @([password isEqualToString:confirm])<span class="variable">.description</span>;</span><br><span class="line">&#125;];</span><br><span class="line"> </span><br><span class="line">RAC(<span class="keyword">self</span>,label<span class="variable">.text</span>) = combineSignal;</span><br></pre></td></tr></table></figure>
<p>所有对于的输入都整合在了一起。每次不论哪个输入框被修改了，用户的输入都会被reduce成一个字符串的值，然后就可以自动来控制注册按钮的可用状态了。</p>
<p>　　RAC除了能够完成KVO的功能之外，同样可以完成按钮等用户响应的交互功能</p>
<p>　　•完成一个点击按钮弹出Alert的功能</p>
<p>　　•如图所示<br><img src="/images/reactive/271550379435815.gif" class="center"></p>
<p>传统方式实现的代码<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">//添加触发事件</span></span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.btn</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(didClick) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点击按钮触发的回调方法</span></span><br><span class="line">- (<span class="keyword">void</span>)didClick</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建弹出窗口</span></span><br><span class="line">    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:<span class="string">@"蓝鸥"</span> message:<span class="literal">nil</span> delegate:<span class="literal">nil</span> cancelButtonTitle:<span class="literal">nil</span> otherButtonTitles:<span class="string">@"确定"</span>, <span class="literal">nil</span>];</span><br><span class="line">    [alertView show];</span><br><span class="line">     </span><br><span class="line">    RELEASESAFELY(alertView);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>RAC方式实现的代码如下</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加触发信号量</span></span><br><span class="line"><span class="keyword">self</span><span class="variable">.btn</span><span class="variable">.rac_command</span> = [[RACCommand alloc] initWithSignalBlock:^RACSignal *(<span class="keyword">id</span> input) &#123;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//创建弹出窗口</span></span><br><span class="line">    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:<span class="string">@"蓝鸥"</span> message:<span class="literal">nil</span> delegate:<span class="literal">nil</span> cancelButtonTitle:<span class="literal">nil</span> otherButtonTitles:<span class="string">@"确定"</span>, <span class="literal">nil</span>];</span><br><span class="line">    [alertView show];</span><br><span class="line">     </span><br><span class="line">    RELEASESAFELY(alertView);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> [RACSignal empty];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p>通过以上的代码，RACSignal信号量具有如下功能</p>
<p>异步控制或事件驱动的数据源：Cocoa编程中大多数时候会关注用户事件或应用状态改变产生的响应。<br>链式以来操作：网络请求是最常见的依赖性样例，前一个对server的请求完成后，下一个请求才能构建。<br>并行独立动作：独立的数据集要并行处理，随后还要把他们合并成一个最终结果。这在Cocoa中很常见，特别是涉及到同步动作时。<br>　　RACSignal会触发它们的subscriber三种不同类型的事件：</p>
<p>下一个事件从stream中提供一个新值。不像Cocoa集合，它是完全可用的，甚至一个signal可以包含 nil。<br>错误事件会在一个signal结束之前被标示出来这里有一个错误。这种事件可能包含一个 NSError 对象来标示什么发生了错误。错误必须被特殊处理——错误不会被包含在stream的值里面。<br>完成事件标示signal成功结束，不会再有新的值会被加入到stream当中。完成事件也必须被单独控制——它不会出现在stream的值里面。<br>　　一个RACSignal信号量的生命周期由很多下一个(next)事件和一个错误(error)或完成(completed)事件组成（后两者不同时出现)。</p>
<p><strong>总结对比</strong></p>
<p>　  RAC 与 KVO<br>　　Key-Value Observing是Cocoa所有魔法的核心，它被广泛应用在ReactiveCocoa对于属性变化的影响动作中。然而KVO用起来即不简单也不开心：它的API有很多过度设计的参数，以及缺乏方便的block方式调用。</p>
<p>　　RAC 与 Bindings<br>　　Bindings也是黑魔法。</p>
<p>　　虽然对OS X控制的要点就是Bindings，但是它的意义在近年来越来越没那么重要了，因为焦点已经移动到了iOS和UIKit这些Bindings不支持的东西身上。Bindings替代了大量的模版胶水代码，允许在Interface Builder中完成编码，但严格上说还是比较有局限性的，并且_无法_debug。RAC提供了一种简洁易懂、扩展性强的以代码为基础的API来运行在iOS上，目标就是取代所有在OS X能用Bindings实现的神奇功能。</p>
<p>　　Objective-C在C的核心上吸收了Smalltalk的思想建立而成，但哲学理念上已经超越了它原本来源的血统。</p>
<p>　　@protocol 是对C++多重继承的拒绝，顺应抽象数据的类型范式是对Java Interface的吸收。Objective-C 2.0引入了@property / @synthesize则灵感来自C#的 get; set; 方法对getter和setter的速记（就语法上来说，这也是NeXTSETP强硬路线坚持者经常辩论的一点）。Block给这门语言带来了函数式编程的好处，可以使用Grand Central Dispatch——来自Fortran / C / C++ standard OpenMP思想而成的基于队列的并发API。下标和对象字面量都是像Ruby、Javascript这样的脚本语言的标准特性，如今也由一个Clang插件被带入了Objective-C的世界里。</p>
<p>　　ReactiveCocoa则给Objective-C带来了函数响应式编程的健康药剂。它本身也是受C#的Rx library、Clojure和Elm的影响发展而成。</p>
<p>好的点子会传染。ReactiveCocoa就是一种警示，提醒人们好的点子也可以从看似不太可能的地方传播过来，这样的新鲜思想对解决类似的问题也会有完全不同的方法呢。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>什么是响应式编程</strong><br>　　响应式编程是一种面向数据流和变化传播的编程范式。这意味着可以在编程语言中很方便地表达静态或动态的数据流，而相关的计算模型会自动将变化的值通过数据流进行传播。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[理解后台允许定位、音频、网络电话]]></title>
    <link href="http://blog.idukemou.com/2015/04/20/2014-08-10-backgroundModes/"/>
    <id>http://blog.idukemou.com/2015/04/20/2014-08-10-backgroundModes/</id>
    <published>2015-04-20T14:32:20.000Z</published>
    <updated>2015-05-02T14:44:32.000Z</updated>
    <content type="html"><![CDATA[<p>大家都知道我们的程序在后台运行的时间是10分钟，10分钟后便会停止。但是像实时定位，播放音频，以及网络电话这些功能我们需要在后台持续运行。那么我们就要进行相应的设置。<br><a id="more"></a></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"> - (<span class="keyword">void</span>)applicationDidEnterBackground:(<span class="built_in">UIApplication</span> *)application</span><br><span class="line">&#123;  </span><br><span class="line">    <span class="comment">/* Use this method to release shared resources, save user data, </span><br><span class="line">    invalidate timers, and store enough application state information </span><br><span class="line">    to restore your application to its current state in case it is terminated later.  </span><br><span class="line">       If your application supports background execution, this method </span><br><span class="line">    is called instead of applicationWillTerminate: when the user quits.  </span><br><span class="line">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([[UIDevice currentDevice] respondsToSelector:<span class="keyword">@selector</span>(isMultitaskingSupported)])  </span><br><span class="line">    &#123; <span class="comment">//Check if our iOS version supports multitasking I.E iOS 4  </span></span><br><span class="line">        <span class="keyword">if</span> ([[UIDevice currentDevice] isMultitaskingSupported])  </span><br><span class="line">        &#123; <span class="comment">//Check if device supports mulitasking  </span></span><br><span class="line">            <span class="built_in">UIApplication</span> *application = [<span class="built_in">UIApplication</span> sharedApplication]; </span><br><span class="line">            <span class="comment">//Get the shared application instance  </span></span><br><span class="line">              </span><br><span class="line">            __block UIBackgroundTaskIdentifier background_task; </span><br><span class="line">            <span class="comment">//Create a task object  </span></span><br><span class="line">              </span><br><span class="line">            background_task = [application beginBackgroundTaskWithExpirationHandler: ^&#123;  </span><br><span class="line">                <span class="comment">/*  </span><br><span class="line">                 当应用程序后台停留的时间为0时，会执行下面的操作</span><br><span class="line">                 （应用程序后台停留的时间为600s，可以通过backgroundTimeRemaining查看）  </span><br><span class="line">                 */</span>  </span><br><span class="line">                [application endBackgroundTask: background_task];</span><br><span class="line">                 <span class="comment">//Tell the system that we are done with the tasks  </span></span><br><span class="line">                background_task = UIBackgroundTaskInvalid; </span><br><span class="line">                <span class="comment">//Set the task to be invalid  </span></span><br><span class="line">                  </span><br><span class="line">                <span class="comment">//System will be shutting down the app at any point in time now  </span></span><br><span class="line">            &#125;];  </span><br><span class="line">              </span><br><span class="line">            <span class="comment">// Background tasks require you to use asyncrous tasks  </span></span><br><span class="line">              </span><br><span class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;  </span><br><span class="line">                <span class="comment">//Perform your tasks that your application requires  </span></span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"time remain:%f"</span>, application<span class="variable">.backgroundTimeRemaining</span>);                  </span><br><span class="line">                [application endBackgroundTask: background_task]; </span><br><span class="line">                <span class="comment">//End the task so the system knows that you are done with what you need to perform  </span></span><br><span class="line">                background_task = UIBackgroundTaskInvalid; <span class="comment">//Invalidate the background_task  </span></span><br><span class="line">            &#125;);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 修改应用的Info.plist 文件，你需要在Info.plist文件中添加UIBackgroundModes字段，该字段的值是应用支持的所有后台模式，是一个数值类型。目前此数 组可以包含“audio”、“location”和“voip”这三个字符串常量.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>大家都知道我们的程序在后台运行的时间是10分钟，10分钟后便会停止。但是像实时定位，播放音频，以及网络电话这些功能我们需要在后台持续运行。那么我们就要进行相应的设置。<br>]]>
    
    </summary>
    
      <category term="iOS开发" scheme="http://blog.idukemou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UIScrollView原理探究]]></title>
    <link href="http://blog.idukemou.com/2015/04/20/2014-08-10-uiscrollview/"/>
    <id>http://blog.idukemou.com/2015/04/20/2014-08-10-uiscrollview/</id>
    <published>2015-04-20T14:32:20.000Z</published>
    <updated>2015-05-02T14:44:57.000Z</updated>
    <content type="html"><![CDATA[<p>文章出处:<a href="http://www.objc.io/issue-3/scroll-view.html" target="_blank" rel="external">http://www.objc.io/issue-3/scroll-view.html</a></p>
<p>Issue #3 Views, August 2013<br>By <a href="http://stablekernel.com" target="_blank" rel="external">Joe Conway</a><br><a id="more"></a><br>It may be hard to believe, but a UIScrollView isn’t much different than a standard UIView. Sure, the scroll view has a few more methods, but those methods are really just facades of existing UIView properties. Thus, most of the understanding of how a UIScrollView works comes from understanding UIView - specifically, the details of the two-step view rendering process.</p>
<h3 id="Rasterization_and_Composition">Rasterization and Composition</h3><p>The first part of the rendering process is known as rasterization. Rasterization simply means to take a set of drawing instructions and produce an image. UIButtons, for example, draw an image with a rounded rectangle and a title in the center. These images aren’t drawn to the screen; instead, they are held onto by their view to be used during the next step.</p>
<p>Once each view has its rasterized image, these images are drawn on top of each other to produce one screen-sized image in a step called composition. The view hierarchy plays a big role in how composition occurs: a view’s image is composited on top of its superview’s image. Then, that composited image is composited on top of the super-superview’s image, and so on. The view at the top of the hierarchy is the window and its composited image (which is a composite of every image in the view hierarchy) is what the user sees.</p>
<p>Conceptually, this idea of layering independent images on top of each other to produce a final, flat image should make sense, especially if you have used a tool like Photoshop before. We also have another article in this issue explaining in detail how pixels get onto the screen.</p>
<p>Now, recall that every view has a bounds and frame rectangle. When laying out an interface, we deal with the frame rectangle of a view. This allows us to position and size the view. The frame and bounds of a view will always have the same size, but their origin will differ. Understanding how these two rectangles work is the key to understanding how UIScrollView works.</p>
<p>During the rasterization step, a view doesn’t care about what is going to happen in the upcoming composition step. That is to say, it doesn’t care about its frame (which will be used to position the view’s image) or its place in the view hierarchy (which will determine the order in which it is composited). The only thing a view cares about at this time is drawing its own content. This drawing occurs in each view’s drawRect:method.</p>
<p>Before drawRect: is called, a blank image is created for the view to draw its content in. This image’s coordinate system is the bounds rectangle of the view. For nearly every view, the bounds rectangle’s origin is {0, 0}. Thus, to draw something in the top-left corner of the rasterized image, you would draw at the origin of the bounds, the point {x:0, y:0}. To draw something in the bottom right corner of an image, you would draw at point {x:width, y:height}. If you draw outside of a view’s bounds, that drawing is not part of the rasterized image and is discarded.</p>
<p><img src="/images/uiscrollview/SV2@2x.png" class="center"></p>
<p>During the composition step, each view composites its rasterized image on top of its superview’s image (and so on). A view’s frame rectangle determines where the view’s image is drawn on its superview’s image - the origin of the frame indicates the offset between the top-left corner of the view’s image and its superview’s image. So, a frame origin of {x:20, y:15} will create a composited image where the view’s image is drawn on top of its superview’s image, shifted to the right 20 points and down 15 points. Because the frame and bounds rectangle of a view are always the same size, the image is composited pixel for pixel to its superview’s image. This ensures there is no stretching or shrinking of the rasterized image.</p>
<p><img src="/images/uiscrollview/SV1@2x.png" class="center"></p>
<p>Remember, we’re talking about just one composite operation between a view and its superview. Once those two views are composited together, the resulting composite image is composited with the super-superview’s image and so on: a snowball effect.</p>
<p>Think about the math behind compositing an image onto another. The top-left corner of a view’s image is offset by its frame’s origin and then drawn onto its superview’s image:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CompositedPosition<span class="variable">.x</span> = View<span class="variable">.frame</span><span class="variable">.origin</span><span class="variable">.x</span> - Superview<span class="variable">.bounds</span><span class="variable">.origin</span><span class="variable">.x</span>;</span><br><span class="line">CompositedPosition<span class="variable">.y</span> = View<span class="variable">.frame</span><span class="variable">.origin</span><span class="variable">.y</span> - Superview<span class="variable">.bounds</span><span class="variable">.origin</span><span class="variable">.y</span>;</span><br></pre></td></tr></table></figure>
<p>Now, as we have said before, the origin of a view’s bounds rectangle is typically just {0, 0}. Thus, when doing the math, we just drop out one of the values and we get:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CompositedPosition<span class="variable">.x</span> = View<span class="variable">.frame</span><span class="variable">.origin</span><span class="variable">.x</span>;</span><br><span class="line">CompositedPosition<span class="variable">.y</span> = View<span class="variable">.frame</span><span class="variable">.origin</span><span class="variable">.y</span>;</span><br></pre></td></tr></table></figure>
<p>So, we can look at a few different frames and see how they would look:<br><img src="/images/uiscrollview/SV3@2x.png" class="center"></p>
<p>And this should make sense. We change the frame’s origin of the button, and it changes its position relative to its lovely purple superview. Notice that if we move the button so that parts of it are outside of the bounds of the purple superview, those parts are clipped in the same way drawing during rasterization would be clipped. However, technically, because of how iOS handles compositing under the hood, you can have a subview render outside of its superview’s bounds, but drawing during rasterization cannot occur outside of a view’s bounds.</p>
<h3 id="Scroll_View’s_Content_Offset">Scroll View’s Content Offset</h3><p>Now, what does all of this have to do with UIScrollView? Everything. Think about a way we could accomplish scrolling: we could have a view whose frame we change when we drag it. It accomplishes the same thing, right? If I drag my finger to the right, I increase the origin.x of the view I’m dragging and voila, scroll view!</p>
<p>The problem with that, of course, is that there are typically many views in a scroll view. To implement this panning feature, you would have to change the frames of every view every time the user moved his or her finger. But we’re missing something. Remember that equation that we came up with to determine where a view composited its image onto its superview?</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CompositedPosition<span class="variable">.x</span> = View<span class="variable">.frame</span><span class="variable">.origin</span><span class="variable">.x</span> - Superview<span class="variable">.bounds</span><span class="variable">.origin</span><span class="variable">.x</span>;</span><br><span class="line">CompositedPosition<span class="variable">.y</span> = View<span class="variable">.frame</span><span class="variable">.origin</span><span class="variable">.y</span> - Superview<span class="variable">.bounds</span><span class="variable">.origin</span><span class="variable">.y</span>;</span><br></pre></td></tr></table></figure>
<p>We dropped the Superview.bounds.origin values because they were always 0. But what if they weren’t? What if, say, we used the same frames from the previous diagram, but we changed the purple view’s bounds origin to something like {-30, -30}. We’d get this:<br><img src="/images/uiscrollview/SV4@2x.png" class="center"></p>
<p>Now, the beauty of this is that every single subview of this purple view is shifted by the change to its bounds. This is, in fact, exactly how a scroll view works when you set its contentOffset property: it changes the origin of the scroll view’s bounds. In fact, contentOffset isn’t even real! Its code probably looks like this:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setContentOffset:(<span class="built_in">CGPoint</span>)offset</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">CGRect</span> bounds = [<span class="keyword">self</span> bounds];</span><br><span class="line">	bounds<span class="variable">.origin</span> = offset;</span><br><span class="line">	[<span class="keyword">self</span> setBounds:bounds];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Notice that in the previous diagram, changing the bounds’ origin enough moved the button outside of the composited image produced by the purple view and the button. This is just what happens when you scroll a scroll view enough so that a view disappears!</p>
<h3 id="A_Window_into_the_World:_Content_Size">A Window into the World: Content Size</h3><p>Now that the hard part is out of the way, let’s look at another property of UIScrollView, contentSize.</p>
<p>The content size of a scroll view doesn’t change anything about the bounds of a scroll view and therefore does not impact how a scroll view composites its subviews. Instead, the content size defines the scrollable area. By default, a scroll view’s content size is a big, fat {w:0, h:0}. Since there is no scrollable area, the user can’t scroll, but the scroll view will still display all of the subviews that fit inside the scroll view’s bounds.</p>
<p>When the content size is set to be larger than the bounds of the scroll view, the user is allowed to scroll. You can think of the bounds of a scroll view as a window into the scrollable area defined by the content size:<br><img src="/images/uiscrollview/SV5@2x.png" class="center"></p>
<p>When the content offset is {x:0, y:0}, the viewing window’s top-left corner is in the top-left corner of the scrollable area. This is also the minimum value of the content offset; the user can’t scroll to the left or above the scrollable area. There’s nothing there!</p>
<p>The maximum value for the content offset is the difference between the content size and the scroll view’s bounds’ size. This makes sense; scrolling all the way to the bottom right, the user is stopped so that the bottom-right edge of the scrolling area is flush with the bottom-right edge of the scroll view’s bounds. You could write the maximum content offset like this:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">contentOffset<span class="variable">.x</span> = contentSize<span class="variable">.width</span> - bounds<span class="variable">.size</span><span class="variable">.width</span>;</span><br><span class="line">contentOffset<span class="variable">.y</span> = contentSize<span class="variable">.height</span> - bounds<span class="variable">.size</span><span class="variable">.height</span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="Tweaking_the_Window_with_Content_Insets">Tweaking the Window with Content Insets</h3><p>The property contentInset can change the maximum and minimum values of the content offset to allow scrolling outside of the scrollable area. Its type is UIEdgeInsets, which consists of 4 numbers: {top, left, bottom, right}. When you introduce an inset, you change the range of the content offset. For example, setting the content inset to have a value of 10 for its top value allows the content offset’s y value to reach -10. This introduces padding around the scrollable area.<br><img src="/images/uiscrollview/SV6@2x.png" class="center"></p>
<p>This may not seem very useful at first. In fact, why not just increase the content size? Well, you should avoid changing the content size of a scroll view unless you have to. To understand why, consider a table view (UITableView is a subclass of UIScrollView, so it has all of the same properties). The table view’s scrollable area has been carefully calculated to fit each one of its cells snugly. When you scroll past the boundaries of the table view’s first or last cells, the table view snaps the content offset back into place, so that the cells once again fit snugly in the scroll view’s bounds.</p>
<p>Now, what happens when you want to implement pull to refresh using a UIRefreshControl? You can’t put the UIRefreshControl within the scrollable area of the table view, otherwise, the table view would allow the user to stop scrolling halfway through the refresh control, and the top would snap to the top of the refresh control. Thus, you must put refresh control just above the scrollable area. This allows the content offset to snap back to the first row, not the refresh control.</p>
<p>But wait, if you initiate the pull-to-refresh mechanism by scrolling far enough, the table view does allow the content offset to snap refresh control into the scrollable area, and this is because of the table view’s content inset. When the refresh action is initiated, the content inset is adjusted so that the minimum content offset includes the entirety of the refresh control. When the refresh completes, the content inset is returned to normalcy, the content offset follows suit, and none of the math required for determining the content size needs to be re-computed.</p>
<p>How can you use the content inset in your own code? Well, there is one great use for the it: when the keyboard is on the screen. Typically, you try to design a user interface that fits the screen snugly. When the keyboard appears on the screen, you lose a few hundred pixels of that space. All of the stuff underneath the keyboard is obscured.</p>
<p>Now, the scroll view’s bounds haven’t changed, and neither has its content size (nor should it). But the user can’t scroll the scroll view. Think about the equation from earlier: the maximum content offset is the difference between the content size and the bounds’ size. If they are equal, which they are in your snug interface that now has a keyboard messing up your day, the maximum content offset is {x:0, y:0}.</p>
<p>The trick, then, is to put the interface in a scroll view. The content size of the scroll view remains fixed at the same size as the scroll view’s bounds. When the keyboard appears on the screen, you set the bottom of the content inset equal to the height of the keyboard.<br><img src="/images/uiscrollview/SV7@2x.png" class="center"></p>
<p>This allows the maximum value of the content offset to show the area beyond the scrollable area. The top of the visible area is outside the bounds of the scroll view, and is therefore clipped (although it is also off the screen itself, so that doesn’t matter too much).</p>
<p>Hopefully, this gives you some insight into the inner workings of scroll views. Are you wondering about zooming? Well, we won’t talk about it today, but here’s a fun tip: check the transform property of the view you return from viewForZoomingInScrollView:. Once again, you’ll find that a scroll view is just cleverly using already-existing properties of UIView.</p>
]]></content>
    <summary type="html">
    <![CDATA[It may be hard to believe, but a UIScrollView isn’t much different than a standard UIView. Sure, the scroll view has a few more methods, but those methods are really just facades of existing UIView properties.]]>
    
    </summary>
    
      <category term="iOS开发" scheme="http://blog.idukemou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅析Objective-C字面量]]></title>
    <link href="http://blog.idukemou.com/2015/04/07/Objective-C%E5%AD%97%E9%9D%A2%E9%87%8F/"/>
    <id>http://blog.idukemou.com/2015/04/07/Objective-C字面量/</id>
    <published>2015-04-07T00:00:00.000Z</published>
    <updated>2015-04-07T11:57:19.000Z</updated>
    <content type="html"><![CDATA[<p>编写Objective-C程序时，总会用到某几个类，它们属于Foundation框架。虽然从技术上来说，不用Foundation框架也能写出Objective-C代码，但实际上却经常要用到此框架。这几个类是NSString、NSNumber、NSArray、NSDictionary。从类名上即可看出各自所表示的数据结构。<br><a id="more"></a></p>
<p>Objective-C以语法繁杂而著称。事实上的确是这样。不过，从Objective-C 1.0起，有一种非常简单的方式能创建NSString对象。这就是“字符串字面量”（string literal），其语法如下：<br>NSString *someString = @”Effective Objective-C 2.0”;</p>
<p>如果不用这种语法的话，就要以常见的alloc及init方法来分配并初始化NSString对象了。在版本较新的编译器中，也能用这种字面量语法来声明NSNumber、NSArray、NSDictionary类的实例。使用字面量语法（literal syntax）可以缩减源代码长度，使其更为易读。</p>
<p>字面数值</p>
<p>有时需要把整数、浮点数、布尔值封入Objective-C对象中。这种情况下可以用NSNumber类，该类可处理多种类型的数值。若是不用字面量，那么就需要按下述方式创建实例：<br>NSNumber *someNumber = [NSNumber numberWithInt:1];</p>
<p>上面这行代码创建了一个数字，将其值设为整数1。然而使用字面量能令代码更为整洁：<br>NSNumber *someNumber = @1;</p>
<p>大家可以看到，字面量语法更为精简。不过它还有很多好处。能够以NSNumber实例表示的所有数据类型都可使用该语法。例如：<br>NSNumber <em>intNumber = @1;<br>NSNumber </em>floatNumber = @2.5f;<br>NSNumber <em>doubleNumber = @3.14159;<br>NSNumber </em>boolNumber = @YES;<br>NSNumber *charNumber = @’a’;</p>
<p>字面量语法也适用于下述表达式：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">float</span> y = <span class="number">6.32</span>f;</span><br><span class="line"><span class="built_in">NSNumber</span> *expressionNumber = @(x * y);</span><br></pre></td></tr></table></figure></p>
<p>以字面量来表示数值十分有用。这样做可以令NSNumber对象变得整洁，因为声明中只包含数值，而没有多余的语法成分。</p>
<p>字面量数组</p>
<p>数组是常用的数据结构。如果不使用字面量语法，那么就要这样来创建数组：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *animals =</span><br><span class="line">    [<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@"cat"</span>, <span class="string">@"dog"</span>,</span><br><span class="line">                             <span class="string">@"mouse"</span>, <span class="string">@"badger"</span>, <span class="literal">nil</span>];</span><br></pre></td></tr></table></figure></p>
<p>而使用字面量语法来创建则是：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *animals = @[<span class="string">@"cat"</span>, <span class="string">@"dog"</span>, <span class="string">@"mouse"</span>, <span class="string">@"badger"</span>];</span><br></pre></td></tr></table></figure></p>
<p>上面这种做法不仅简单，而且还利于操作数组。数组的常见操作就是取某个下标所对应的对象，这用字面量来做更为容易。如果不用字面量，那么通常会用“objectAtIndex:”方法：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *dog = [animals objectAtIndex:<span class="number">1</span>];</span><br></pre></td></tr></table></figure></p>
<p>若使用字面量，则是：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *dog = animals[<span class="number">1</span>];</span><br></pre></td></tr></table></figure></p>
<p>这也叫做“取下标”操作（subscripting），与使用字面量语法的其他情况一样，这种方式也更为简洁、更易理解，而且与其他语言中依下标来访问数组元素时所用的语法类似。</p>
<p>不过，用字面量语法创建数组时要注意，若数组元素对象中有nil，则会抛出异常，因为字面量语法实际上只是一种“语法糖”（syntactic sugar），其效果等于是先创建了一个数组，然后把方括号内的所有对象都加到这个数组中。抛出的异常会是这样：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*** Terminating app due to uncaught exception</span><br><span class="line">'NSInvalidArgumentException', reason: '***</span><br><span class="line">-[__NSPlaceholderArray initWithObjects:count:]: attempt to</span><br><span class="line">insert nil object from objects[0]'</span><br></pre></td></tr></table></figure></p>
<p>在改用字面量语法来创建数组时就会遇到这个问题。下面这段代码分别以两种语法创建数组：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">id</span> object1 = <span class="comment">/* ... */</span>;</span><br><span class="line"><span class="keyword">id</span> object2 = <span class="comment">/* ... */</span>;</span><br><span class="line"><span class="keyword">id</span> object3 = <span class="comment">/* ... */</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSArray</span> *arrayA = [<span class="built_in">NSArray</span> array WithObjects:</span><br><span class="line">                       object1, object2, object3, <span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">NSArray</span> *arrayB = @[object1, object2, object3];</span><br></pre></td></tr></table></figure></p>
<p>大家想想：如果object1与object3都指向了有效的Objective-C对象，而object2是nil，那么会出现什么情况呢？按字面量语法创建数组arrayB时会抛出异常。arrayA虽然能创建出来，但是其中却只含有object1一个对象。原因在于，“arrayWithObjects:”方法会依次处理各个参数，直到发现nil为止，由于object2是nil，所以该方法会提前结束。</p>
<p>这个微妙的差别表明，使用字面量语法更为安全。抛出异常令应用程序终止执行，这比创建好数组之后才发现元素个数少了要好。向数组中插入nil通常说明程序有错，而通过异常可以更快地发现这个错误。</p>
<p>字面量字典</p>
<p>“字典”（Dictionary）是一种映射型数据结构，可向其中添加键值对。与数组一样，Objective-C代码也经常用到字典。其创建方式如下：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSDictionary</span> *personData =</span><br><span class="line">    [NSDictionarydictionaryWithObjectsAndKeys:</span><br><span class="line">        <span class="string">@"Matt"</span>, <span class="string">@"firstName"</span>,</span><br><span class="line">        <span class="string">@"Galloway"</span>, <span class="string">@"lastName"</span>,</span><br><span class="line">        [<span class="built_in">NSNumber</span> numberWithInt:<span class="number">28</span>], <span class="string">@"age"</span>,</span><br><span class="line">        <span class="literal">nil</span>];</span><br></pre></td></tr></table></figure></p>
<p>这样写令人困惑，因为其顺序是&lt;对象&gt;，&lt;键&gt;，&lt;对象&gt;，&lt;键&gt;。这与通常理解的顺序相反，我们一般认为是把“键”映射到“对象”。因此，这种写法不容易读懂。如果改用字面量语法，就清晰多了：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSDictionary</span> *personData =</span><br><span class="line">    @&#123;<span class="string">@"firstName"</span> : <span class="string">@"Matt"</span>,</span><br><span class="line">      <span class="string">@"lastName"</span> : <span class="string">@"Galloway"</span>,</span><br><span class="line">      <span class="string">@"age"</span> : @<span class="number">28</span>&#125;;</span><br></pre></td></tr></table></figure></p>
<p>上面这种写法更简明，而且键出现在对象之前，理解起来较顺畅。此范例代码还说明了使用字面量数值的好处。字典中的对象和键必须都是Objective-C对象，所以不能把整数28直接放进去，而要将其封装在NSNumber实例中才行。使用字面量语法很容易就能做到这一点，只需给数字前加一个@字符即可。</p>
<p>与数组一样，用字面量语法创建字典时也有个问题，那就是一旦有值为nil，便会抛出异常。不过基于同样的原因，这也是个好事。假如在创建字典时不小心用了空值对象，那么“dictionaryWithObjectsAndKeys:”方法就会在首个nil之前停下，并抛出异常，这有助于查错。</p>
<p>字典也可以像数组那样用字面量语法访问。按照特定键访问其值的传统做法是：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *lastName = [personData objectForKey:<span class="string">@"lastName"</span>];</span><br></pre></td></tr></table></figure></p>
<p>与之等效的字面量语法则是：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *lastName = personData[<span class="string">@"lastName"</span>];</span><br></pre></td></tr></table></figure></p>
<p>这样写也省去了冗赘的语法，令此行代码简单易读。</p>
<p>可变数组与字典</p>
<p>通过取下标操作，可以访问数组中某个下标或字典中某个键所对应的元素。如果数组与字典对象是可变的（mutable），那么也能通过下标修改其中的元素值。修改可变数组与字典内容的标准做法是：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mutableArray replaceObjectAtIndex:<span class="number">1</span> withObject:<span class="string">@"dog"</span>];</span><br><span class="line">[mutableDictionary setObject:<span class="string">@"Galloway"</span>forKey:<span class="string">@"lastName"</span>];</span><br></pre></td></tr></table></figure></p>
<p>若换用取下标操作来写，则是：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mutableArray[<span class="number">1</span>] = <span class="string">@"dog"</span>;</span><br><span class="line">mutableDictionary[<span class="string">@"lastName"</span>] = <span class="string">@"Galloway"</span>;</span><br></pre></td></tr></table></figure></p>
<p>局限性</p>
<p>字面量语法有个小小的限制，就是除了字符串以外，所创建出来的对象必须属于Foundation框架才行。如果自定义了这些类的子类，则无法用字面量语法创建其对象。要想创建自定义子类的实例，必须采用“非字面量语法”（nonliteral syntax）。然而，由于NSArray、NSDictionary、NSNumber都是业已定型的“子族”（class cluster，参见第9条），因此很少有人会从其中自定义子类，真要那样做也比较麻烦。而且一般来说，标准的实现已经很好了，无须再改动。创建字符串时可以使用自定义的子类，然而必须要修改编译器的选项才行。除非你明白这样做的后果，否则不鼓励使用此选项，用NSString就足够了。</p>
<p>使用字面量语法创建出来的字符串、数组、字典对象都是不可变的（immutable）。若想要可变版本的对象，则需复制一份：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSMutableArray</span> *<span class="keyword">mutable</span> = [@[@<span class="number">1</span>, @<span class="number">2</span>, @<span class="number">3</span>, @<span class="number">4</span>, @<span class="number">5</span>]mutableCopy];</span><br></pre></td></tr></table></figure></p>
<p>这么做会多调用一个方法，而且还要再创建一个对象，不过使用字面量语法所带来的好处还是多于上述缺点的。</p>
<p>要点</p>
<p>应该使用字面量语法来创建字符串、数值、数组、字典。与创建此类对象的常规方法相比，这么做更加简明扼要。</p>
<p>应该通过取下标操作来访问数组下标或字典中的键所对应的元素。</p>
<p>用字面量语法创建数组或字典时，若值中有nil，则会抛出异常。因此，务必确保值里不含nil。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>编写Objective-C程序时，总会用到某几个类，它们属于Foundation框架。虽然从技术上来说，不用Foundation框架也能写出Objective-C代码，但实际上却经常要用到此框架。这几个类是NSString、NSNumber、NSArray、NSDictionary。从类名上即可看出各自所表示的数据结构。<br>]]>
    
    </summary>
    
      <category term="iOS开发" scheme="http://blog.idukemou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS开发之地图与定位]]></title>
    <link href="http://blog.idukemou.com/2015/03/06/iOS%E5%BC%80%E5%8F%91%E4%B9%8B%E5%9C%B0%E5%9B%BE%E4%B8%8E%E5%AE%9A%E4%BD%8D/"/>
    <id>http://blog.idukemou.com/2015/03/06/iOS开发之地图与定位/</id>
    <published>2015-03-06T01:47:33.000Z</published>
    <updated>2015-03-06T01:49:27.000Z</updated>
    <content type="html"><![CDATA[<p>现在很多社交、电商、团购应用都引入了地图和定位功能，似乎地图功能不再是地图应用和导航应用所特有的。的确，有了地图和定位功能确实让我们的生活更加丰富多彩，极大的改变了我们的生活方式。例如你到了一个陌生的地方想要查找附近的酒店、超市等就可以打开软件搜索周边;类似的，还有很多团购软件可以根据你所在的位置自动为你推荐某些商品。总之，目前地图和定位功能已经大量引入到应用开发中。今天就和大家一起看一下iOS如何进行地图和定位开发。</p>
<ol>
<li>定位</li>
<li>地图</li>
</ol>
<p>**定位</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>现在很多社交、电商、团购应用都引入了地图和定位功能，似乎地图功能不再是地图应用和导航应用所特有的。的确，有了地图和定位功能确实让我们的生活更加丰富多彩，极大的改变了我们的生活方式。例如你到了一个陌生的地方想要查找附近的酒店、超市等就可以打开软件搜索周边;类似的，还有很多团购]]>
    </summary>
    
      <category term="iOS开发" scheme="http://blog.idukemou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS开发之设计模式一]]></title>
    <link href="http://blog.idukemou.com/2014/10/31/iOS%E5%BC%80%E5%8F%91%E4%B9%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80/"/>
    <id>http://blog.idukemou.com/2014/10/31/iOS开发之设计模式一/</id>
    <published>2014-10-31T02:16:36.000Z</published>
    <updated>2014-10-31T03:25:51.000Z</updated>
    <content type="html"><![CDATA[<p>iOS设计模式－你也许听说过，但是你真的知道它的用意吗？对于设计模式的重要性，很多开发者也很赞同，但是相关的博客太少，并且在coding过程中，我相信绝大多数开发者并不会在意自己的代码是否遵循某个设计模式。说白了，设计模式就是码农先驱们长期coding过程中，总结出来的经验教训，设计理念。我一直坚信，coding就像是在写一篇文章，怎样写出一篇美文呢，就是少说废话，结构巧妙，立意鲜明，设计模式就像是我们写文章时使用的模版，是要写一篇散文呢，还是一首诗，还是等等等等。<br><a id="more"></a></p>
<p>设计模式实际上就是对一些软件设计中的常见问题所提出的可复用的解决方案。这样模版化的设计就是为了帮助我们完成简单、易懂、可复用性高的代码。如果遵照设计模式，我们也可以编出低耦合性的代码，这样可以方便我们后期维护，根据需求替换、修改某些组件。就像拥有步步高打火机一样so easy。<br>作为iOS开发者，我们应当备感荣幸，因为即便我们不懂什么设计模式，我们一样在用它们完成我们的项目。这样感谢我们的衣食父母－Apple。在Cocoa框架中，许多类都是Apple根据设计模式构建的。那么接下来的内容我门就一起把iOS开发中常用的设计模式扒个精光，看看它们究竟是神马？！！</p>
<p>本篇博文中，我讲重点从以下几点带着大家解析设计模式：<br>1.神马是设计模式（<em>What the design pattern is</em>）<br>2.为神马我们要用它（<em>Why you should use it</em>）<br>3.如何使用设计模式（<em>How to use it</em>）<br>4.在哪儿用恰当（<em>Where appropriate</em>）<br>5.到底何时才使用设计模式（<em>common pitfalls to watch for when using the pattern</em>）</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>iOS设计模式－你也许听说过，但是你真的知道它的用意吗？对于设计模式的重要性，很多开发者也很赞同，但是相关的博客太少，并且在coding过程中，我相信绝大多数开发者并不会在意自己的代码是否遵循某个设计模式。说白了，设计模式就是码农先驱们长期coding过程中，总结出来的经验教训，设计理念。我一直坚信，coding就像是在写一篇文章，怎样写出一篇美文呢，就是少说废话，结构巧妙，立意鲜明，设计模式就像是我们写文章时使用的模版，是要写一篇散文呢，还是一首诗，还是等等等等。<br>]]>
    
    </summary>
    
      <category term="设计模式之道" scheme="http://blog.idukemou.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[高仿网易4.0新UI框架的Demo]]></title>
    <link href="http://blog.idukemou.com/2014/10/29/%E9%AB%98%E4%BB%BF%E7%BD%91%E6%98%9340%E6%96%B0UI%E6%A1%86%E6%9E%B6%E7%9A%84Demo/"/>
    <id>http://blog.idukemou.com/2014/10/29/高仿网易40新UI框架的Demo/</id>
    <published>2014-10-29T04:07:51.000Z</published>
    <updated>2014-10-29T04:14:59.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/chenqihui/NewsFourApp" target="_blank" rel="external">NewsFourApp</a>：一个模仿网易4.0新UI框架的开源项目。<br><img src="/images/netease/NewsFourAppGif.gif" class="center"><br><a id="more"></a><br>高仿网易4.0新UI框架的Demo</p>
<p>声明：如果有好的修改，非常欢迎fork提交分享哈</p>
<p>—————————————-华丽丽的分割线———————————————</p>
<p>beta 0.2</p>
<p>—————————————-华丽丽的分割线———————————————</p>
<p>beta 0.1</p>
<p>1、新的抽屉效果，修改于SliderViewController，不过里面已经不一样，毕竟是新的效果嘛<br>(此部分还不算完全具备框架的特性，呵呵😄)</p>
<p>2、首页滑动导航菜单的字体大小和颜色，随scrollView滑动的变化而变化的效果</p>
<p>3、使用MLTransition的返回功能和LBBlurredImage实现毛玻璃效果</p>
<p>4、各种跳转的调用</p>
<p>5、根据NewsTwoApp的建议来修改部分bug及实现需求</p>
<p>6、增加显示右边view之后的回调方法</p>
<hr>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/chenqihui/NewsFourApp">NewsFourApp</a>：一个模仿网易4.0新UI框架的开源项目。<br><img src="/images/netease/NewsFourAppGif.gif" class="center" /><br>]]>
    
    </summary>
    
      <category term="iOS开发" scheme="http://blog.idukemou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Size Class]]></title>
    <link href="http://blog.idukemou.com/2014/10/24/Size-Class/"/>
    <id>http://blog.idukemou.com/2014/10/24/Size-Class/</id>
    <published>2014-10-24T08:41:15.000Z</published>
    <updated>2014-10-24T09:32:45.000Z</updated>
    <content type="html"><![CDATA[<p>以前和安卓的同学聊天的时候，谈到适配一直是一个非常开心的话题，看到他们被各种屏幕适配折磨的欲仙欲死，心里真替他们高兴。不过在做到 iPhone 和 iPad 的适配的时候，一个页面需要配置多个 xib 进行开发还是个很头疼的事情。再加上 iPhone6 和 iPhone6 plus 的发布，适配似乎也变得麻烦起来。今天了解了 iOS8 中的 Size Class 之后，真的笑，笑出声。<br><a id="more"></a><br><strong>简介</strong><br>先来看一下我们的新伙伴：Size Classes。在 iOS8 中，我们不用再像以前那样，一个页面新建多个 xib 文件来适配不同类型的屏幕，现在我们可以把各种尺寸屏幕的适配工作放在一个文件中完成，然后可以通过不同类别的 Size 来定制各种尺寸的界面。换句话说，你眼前的 Storyboard 不是一个普通的 Storyboard ，而是一个九合一的 Storyboard ，可以管理九种类型的屏幕。<br>对于宽度和高度而言，都有三种情况：紧凑 (Compact) 、任意 (Any) 、 正常 (Regular) ，所以一共有9个类别，在设置 Size Class 的时候页面会有提示。比如宽为 Compact 高为 Any 的情况，提示为 3.5-inch、4-inch、4.7-inch的横竖状态下的屏幕：<br><img src="http://ww1.sinaimg.cn/large/5317194cjw1elmdblrgc1j20d20gyaaw.jpg" alt="size-class-1"><br>苹果官网文档举了一些例子，比如 iPad ：<br><img src="/images/sizeClass/size-class-2.png" class="right"><br><img src="/images/sizeClass/size-class-3.png" class="center"><br>比如 iPhone ：<br><img src="/images/sizeClass/size-class-4.png" class="center"><br><img src="/images/sizeClass/size-class-5.png" class="center"></p>
<p>比如 iPhone6 plus 的横屏状态：<br><img src="/images/sizeClass/size-class-6.png" class="center"><br>实验<a href="http://callmewhy.qiniudn.com/QQ20140914-17%402x.png" target="_blank" rel="external">http://callmewhy.qiniudn.com/QQ20140914-17%402x.png</a><br>Size Class 的作用是将不同尺寸的屏幕进行分类处理，而最后进行布局管理的还是Autolayout。</p>
<p>下面我们来搞个小项目试验一下。项目源码可以在这里下载。</p>
<p>新建一个项目，进入到 Storyboard ，发现默认的尺寸是宽高均为 Any 的：<br><img src="/images/sizeClass/size-class-7.png" class="center"><br>我们可以在右侧的视图中选择开启还是关闭 Size Class ：<br><img src="/images/sizeClass/size-class-8.png" class="center"><br>因为 Size Class 是依赖于 Autolayout 的，所以当你尝试关闭 AutoLayout 而打开 Size Class 的时候会有如下的提醒：<br><img src="/images/sizeClass/size-class-9.png" class="center"><br>接下来我们先搞个 View 看看，测试一下直接扔进去会是什么效果：<br><img src="/images/sizeClass/size-class-10.png" class="center"><br>看起来好像不错啊，难道不用做适配就可以了？</p>
<p>想太多。</p>
<p>我们把 Size 切换到 Compact 看下：<br><img src="/images/sizeClass/size-class-11.png" class="center"><br>喔真的好 Compact 啊！</p>
<p>在不手动添加 Constraints 的情况下， Xcode 会自动自动分配一套默认的 Constraints ，以确保你在任何尺寸的屏幕下都看到一样坐标一样大小的页面。这就意味着我们有时可以忽视自动布局，不再需要设置那些自动布局且效果不错的控件，只需要为某些特定的视图创建 Constraints 。</p>
<p>不过现在我们想让这个正方形时刻保持居中，所以分别给它加上了四个 Constraints ：<br><img src="/images/sizeClass/size-class-12.png" class="center"><br>啊哈这样似乎就可以…就可以了…吗？</p>
<p>我们随便换了个 Size 看下效果，突然发现刚刚加的 Constraints 居然无效了，在导航栏里变成了灰色，在 Storyboard 里也看不到 Constraints 的影子：<br><img src="/images/sizeClass/size-class-13.png" class="center"><br>这是因为刚刚我们的 Constraints 是在宽高均为 Compact 的 Size 中设置的，所以并不适用于其他尺寸的屏幕。这么说难道我们以后都要配置九份 Constraints 吗！这也太苦逼了吧！老板我们要涨工资啊！显然不是，我们只需要把默认的 Constraints 放在宽高均为 Any 的 Size 中即可：<br><img src="/images/sizeClass/size-class-14.png" class="center"><br>这时再切换到其他尺寸就都没有问题了：<br><img src="/images/sizeClass/size-class-15.png" class="center"><br>接下来，假设我们想在 iPhone 设备上显示两个 Label ，但是想在 iPad 上显示四个 Label，可以这样搞。</p>
<p>先把 Size 切换到 iPhone 的尺寸，然后添加两个 Label ：<br><img src="/images/sizeClass/size-class-16.png" class="center"><br>再把 Size 切换到 Regular ，添加三个 Label ：<br><img src="/images/sizeClass/size-class-17.png" class="center"><br>这时在 iPhone 中查看一下效果：<br><img src="/images/sizeClass/size-class-18.png" class="center"><br>再去 iPad 里看下效果：<br><img src="/images/sizeClass/size-class-19.png" class="center"><br>OK 就是这么简单。</p>
<p><strong>实战</strong><br>接下来我们来看一看如何利用 Size Class 来做适配。前面有说过， Size Class 不能解决适配问题，它的功能只是将屏幕进行分类，便于管理。真正搞适配的苦力还是 AutoLayout 。苹果的帮助文档给出三种方案解决 View 的适配问题。</p>
<p>我们先把项目改成最原始的版本，只留一个 View 在视图的正中央。原始版本的项目可以在这里下载。运行一下是这样的：<br><img src="/images/sizeClass/size-class-20.png" class="center"><br>修改 Constraints</p>
<p>适配的第一个方案是针对不同尺寸的屏幕设置不同大小的 Constrain 。</p>
<p>我们选中一个 Constraint ，在右侧面板观察它的属性：<br><img src="/images/sizeClass/size-class-21.png" class="center"><br>在右侧面板就是 Constraints 的值，第一行是默认值，适用于所有尺寸。如果要添加不同尺寸下的自定义值，可以点击加号：<br><img src="/images/sizeClass/size-class-22.png" class="center"><br>这样就可以添加自定义的 Constraint 值了。其中， w 和 h 分别指宽 (width) 和 高(height) 。 C 是指 Size Class 中的 Compact， R 则对应 Regular ， A 对应 Any 。</p>
<p>如果希望这个正方形在 iPad 下可以保持100的边距，在 iPhone 下可以保持0的边距，可以把每个 Constrant 的值都设为100，然后再添加一个 wC hA 的值为0：<br><img src="/images/sizeClass/size-class-23.png" class="center"><br>运行一下程序看下，首先是 iPad 下：<br><img src="/images/sizeClass/size-class-24.png" class="center"><br>简直完美，再看下 iPhone4s 下的效果：<br><img src="/images/sizeClass/size-class-25.png" class="center"><br>哈哈似乎也不错。。。等下，说好的填满呢！怎么左右两边空了这么多空白？</p>
<p>突然想起了前几天在公司用 Xcode6 打开的项目再用 Xcode5 打开之后有些 xib 文件会报错，大意是： Xcode6 加了一些 Margin 我不认识。会不会是这些 Margin 在作怪呢？查了一下官方文档，确实在 iOS8 中多了一个 layoutMargin 的属性。偷偷拿 PS 量了一下，确实默认值是8个 point ，虚惊一场，还以为是 AutoLayout 坏了呢。</p>
<p>不过现在我不是很想要这个 Margin ，怎么把它关了呢？点击下方的 Pin 按钮，把 Margin 的勾选去掉即可：<br><img src="/images/sizeClass/size-class-26.png" class="center"><br>然后再重新设置一下 Constraint ，OK它终于成功的填满了整个屏幕：<br><img src="/images/sizeClass/size-class-27.png" class="center"><br>完整的源码可以在这里下载。</p>
<p><strong>安装和卸载 Constraints</strong></p>
<p>有时候我们可能会遇到比较复杂的设计，针对不同的尺寸需要有不同的布局，这和 Web 开发中的响应式设计颇有几分相似。</p>
<p>假设我们需要这样一个 View ：在 iPad 下固定宽度，居中对齐，在 iPhone 下，则希望它保持左右边距居中对齐。</p>
<p>我们只需要添加 top 、 bottom 、 center x 、 width ，分分钟就可以搞出这样一个布局：<br><img src="/images/sizeClass/size-class-28.png" class="center"><br>现在我们完成了第一步：在 iPad 下固定宽度，居中对齐。</p>
<p>接下来我们需要把 width 属性在 iPhone 中删除。选中 width 之后在右侧可以看到这样一个区域：<br><img src="/images/sizeClass/size-class-29.png" class="center"><br>它表示，当前这个 Constraint 适用宽高均为 Any 的屏幕，和上一步相似，我们可以点击加号添加不同屏幕下的设置：<br><img src="/images/sizeClass/size-class-30.png" class="center"><br>installed 前面打上勾，表示这个 Constraint 是适用这个尺寸的，如果没有打勾，则表明在那个尺寸下这个 Constraint 是无效的。比如下面的这个例子表示这个 Constraint 仅在宽高均为 Regular 的情况下 ( 也就是 iPad ) 有效：<br><img src="/images/sizeClass/size-class-31.png" class="center"><br>接下来我们再添加上 leading 和 trailing 为0：<br><img src="/images/sizeClass/size-class-32.png" class="center"><br>这样就能实现在 iPhone 下保持左右边距居中对齐的效果了：<br><img src="/images/sizeClass/size-class-33.png" class="center"><br>但是打开 iPad 之后发现本来设置的固定宽度的效果失效了，变成了和 iPhone 一样的左右间距固定的情况。这是因为我们没有在 iPad 的屏幕下“卸载” (uninstall) 掉刚刚设置的 leading 和 trailing 。我们有两种方式解决这个问题。</p>
<p>第一种方案，选中 leading 和 trailing 这两个 Constraint 之后，在右侧添加宽高均为 Regular 的选项并去掉勾选，表明，这个 Constraint 适用于所有情况，就是不要用在宽高均为 Regular 的屏幕上：<br><img src="/images/sizeClass/size-class-34.png" class="center"><br>第二种方案，切换到 Regular Regular 的尺寸之后，选中那两个 Constraint 然后按下Command+Delete ( 注意要按下 Command 键，要不然就是彻底删除了)，就可以把这两个 Constraint 在当前的 Size 中卸载了：<br><img src="/images/sizeClass/size-class-35.png" class="center"><br>运行一下， iPad 果然也没有问题了：<br><img src="/images/sizeClass/size-class-36.png" class="center"><br>完整的源码可以在这里下载。</p>
<p><strong>安装和卸载 View</strong></p>
<p>有时候光设置 Constraint 是无法满足比较复杂的需求的，比如大屏下我希望能显示三个按钮，分别对应：吃早饭，吃午饭，吃晚饭。但是在 iPhone 等小屏下可能放不下这么多按钮，只能显示一个按钮：吃饭。遇到这种情况，我们只能对 View 进行安装 (install) 和卸载 (uninstall)。</p>
<p>我们先在 View 里面加上三个按钮：<br><img src="/images/sizeClass/size-class-37.png" class="center"><br>但是我们并不希望这三个按钮出现在 iPhone 中，所以我们可以在右侧面板添加适用的尺寸，并去掉 Any 的勾选。这一步和上一章中 Constraint 的安装卸载十分类似：<br><img src="/images/sizeClass/size-class-38.png" class="center"><br>可以看到左侧的 Button 变成了灰色，表示这个按钮在当前 Any 的尺寸下是不会显示的。我们再添加一个吃饭的按钮，添加 Regular 的尺寸并去掉勾选，表明自己不会在 Regular 屏幕中出现：<br><img src="/images/sizeClass/size-class-39.png" class="center"><br>这样，在 iPhone 中我们可以看到 吃饭 的按钮：<br><img src="/images/sizeClass/size-class-40.png" class="center"><br>而在 iPad 中可以看到 吃早饭 吃午饭 吃晚饭 的按钮：<br><img src="/images/sizeClass/size-class-42.png" class="center"><br>完整的源码可以在<a href="https://github.com/callmewhy/learn-swift/tree/installing-and-uninstalling-views" target="_blank" rel="external">这里下载</a>。</p>
<p><strong>其他</strong></p>
<p>最后，无意中看到仿佛 Font 的左边多了点什么：<br><img src="/images/sizeClass/size-class-42.png" class="center"><br>相信大家早已轻车熟路了，不妨动手试试看。可以参考苹果官方的帮助文档学习。</p>
<p><strong>后话</strong><br>第一次接触 Size Class ，还没有在实际项目中应用过，可能有些理解偏差，如有错误，还望指正，不胜感激。</p>
<p>一路走来，感觉有了 Size Class 之后，iOS 开发的适配工作可能并没有想象中的复杂，哪怕屏幕比更大还大，我们依旧能够真的笑，笑出声。<br><em>原文链接地址:<a href="http://blog.callmewhy.com/2014/09/12/learn-ios8-size-class/#textlogo" target="_blank" rel="external">http://blog.callmewhy.com/2014/09/12/learn-ios8-size-class/#textlogo</a></em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>以前和安卓的同学聊天的时候，谈到适配一直是一个非常开心的话题，看到他们被各种屏幕适配折磨的欲仙欲死，心里真替他们高兴。不过在做到 iPhone 和 iPad 的适配的时候，一个页面需要配置多个 xib 进行开发还是个很头疼的事情。再加上 iPhone6 和 iPhone6 plus 的发布，适配似乎也变得麻烦起来。今天了解了 iOS8 中的 Size Class 之后，真的笑，笑出声。<br>]]>
    
    </summary>
    
      <category term="iOS开发" scheme="http://blog.idukemou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS8 New Features]]></title>
    <link href="http://blog.idukemou.com/2014/10/09/iOS8-New-Features/"/>
    <id>http://blog.idukemou.com/2014/10/09/iOS8-New-Features/</id>
    <published>2014-10-09T14:48:15.000Z</published>
    <updated>2014-10-09T13:13:42.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/ios8newfeatures/image.jpeg" class="center"><br> <a id="more"></a></p>
<ul>
<li>tableView:editActionsForRowAtIndexPath:     // 设置滑动删除时显示多个按钮</li>
<li>UITableViewRowAction                        // 通过此类创建按钮</li>
<li><ol>
<li>我们在使用一些应用的时候，在滑动一些联系人的某一行的时候，会出现删除、置顶、更多等等的按钮，在iOS8之前，我们都需要自己去实现。But，到了iOS8，系统已经写好了，只需要一个代理方法和一个类就搞定了</li>
</ol>
</li>
<li><ol>
<li>iOS8的协议多了一个方法，返回值是数组的tableView:editActionsForRowAtIndexPath:方法，我们可以在方法内部写好几个按钮，然后放到数组中返回，那些按钮的类就是UITableViewRowAction</li>
</ol>
</li>
<li><ol>
<li>在UITableViewRowAction类，我们可以设置按钮的样式、显示的文字、背景色、和按钮的事件（事件在Block中实现）</li>
</ol>
</li>
<li><ol>
<li>在代理方法中，我们可以创建多个按钮放到数组中返回，最先放入数组的按钮显示在最右侧，最后放入的显示在最左侧</li>
</ol>
</li>
<li><ol>
<li>注意：如果我们自己设定了一个或多个按钮，系统自带的删除按钮就消失了…</li>
</ol>
</li>
</ul>
 <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> <span class="preprocessor">#warning iOS8 -</span></span><br><span class="line"><span class="preprocessor">#pragma mark 在滑动手势删除某一行的时候，显示出更多的按钮</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView editActionsForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 添加一个删除按钮</span></span><br><span class="line">    UITableViewRowAction *deleteRowAction = [UITableViewRowAction rowActionWithStyle:UITableViewRowActionStyleDestructive title:<span class="string">@"删除"</span> handler:^(UITableViewRowAction *action, <span class="built_in">NSIndexPath</span> *indexPath) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"点击了删除"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. 更新数据</span></span><br><span class="line">        [_allDataArray removeObjectAtIndex:indexPath<span class="variable">.row</span>];</span><br><span class="line">        <span class="comment">// 2. 更新UI</span></span><br><span class="line">        [tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationAutomatic];</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除一个置顶按钮</span></span><br><span class="line">    UITableViewRowAction *topRowAction = [UITableViewRowAction rowActionWithStyle:UITableViewRowActionStyleDefault title:<span class="string">@"置顶"</span> handler:^(UITableViewRowAction *action, <span class="built_in">NSIndexPath</span> *indexPath) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"点击了置顶"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. 更新数据</span></span><br><span class="line">        [_allDataArray exchangeObjectAtIndex:indexPath<span class="variable">.row</span> withObjectAtIndex:<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 更新UI</span></span><br><span class="line">        <span class="built_in">NSIndexPath</span> *firstIndexPath = [<span class="built_in">NSIndexPath</span> indexPathForRow:<span class="number">0</span> inSection:indexPath<span class="variable">.section</span>];</span><br><span class="line">        [tableView moveRowAtIndexPath:indexPath toIndexPath:firstIndexPath];</span><br><span class="line">    &#125;];</span><br><span class="line">    topRowAction<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> blueColor];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加一个更多按钮</span></span><br><span class="line">    UITableViewRowAction *moreRowAction = [UITableViewRowAction rowActionWithStyle:UITableViewRowActionStyleNormal title:<span class="string">@"更多"</span> handler:^(UITableViewRowAction *action, <span class="built_in">NSIndexPath</span> *indexPath) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"点击了更多"</span>);</span><br><span class="line">        </span><br><span class="line">        [tableView reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationMiddle];</span><br><span class="line">    &#125;];</span><br><span class="line">    moreRowAction<span class="variable">.backgroundEffect</span> = [UIBlurEffect effectWithStyle:UIBlurEffectStyleDark];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将设置好的按钮放到数组中返回</span></span><br><span class="line">    <span class="keyword">return</span> @[deleteRowAction, topRowAction, moreRowAction];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 本文转自木子泽的博客：<a href="http://blog.sina.com.cn/s/blog_9c2363ad0102v23y.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_9c2363ad0102v23y.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/images/ios8newfeatures/image.jpeg" class="center"/><br>]]>
    
    </summary>
    
      <category term="iOS开发" scheme="http://blog.idukemou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UIWebView+HTML5]]></title>
    <link href="http://blog.idukemou.com/2014/08/08/2014-08-08-UIWebView+HTML5/"/>
    <id>http://blog.idukemou.com/2014/08/08/2014-08-08-UIWebView+HTML5/</id>
    <published>2014-08-08T05:24:30.000Z</published>
    <updated>2014-10-09T09:52:23.000Z</updated>
    <content type="html"><![CDATA[<p>原文出处:<a href="http://blog.csdn.net/duzixi/article/details/36047201" target="_blank" rel="external">http://blog.csdn.net/duzixi/article/details/36047201</a></p>
<p>对于不少iOS开发者来说，HTML5的内容比较陌生。尤其是UIWebView类的 <em>stringByEvaluatingJavaScriptFromString</em> 方法让很多人觉得又得学一种新的语言。而这一部分也是项目中学生常问的问题之一。本文以Category（类目）的方式扩展了UIWebView类，将一些常用的JavaScript操作封装成UIWebView类方法。<br><a id="more"></a></p>
<p>最新源代码下载地址：<a href="https://github.com/duzixi/UIWebView-HTML5" target="_blank" rel="external">https://github.com/duzixi/UIWebView-HTML5</a>（持续维护）</p>
<h3 id="头文件（UIWebView+HTML5-h）">头文件（UIWebView+HTML5.h）</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  UIWebView+HTML5.h</span></span><br><span class="line"><span class="comment">//  WebViewJS</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by 杜子兮(duzixi) on 14-6-30.</span></span><br><span class="line"><span class="comment">//  Edited  by 杜子兮(duzixi) on 14-7-11. 修改网页图片显示大小</span></span><br><span class="line"><span class="comment">//                                       添加(jQuery)</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2014年 lanou3g.com 蓝鸥. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> </span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIWebView</span> (<span class="title">JavaScript</span>)</span></span><br><span class="line"> </span><br><span class="line"><span class="preprocessor">#pragma mark -</span></span><br><span class="line"><span class="preprocessor">#pragma mark 获取网页中的数据</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//  获取某个标签的结点个数</span></span><br><span class="line">- (<span class="keyword">int</span>)nodeCountOfTag:(<span class="built_in">NSString</span> *)tag;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//  获取当前页面URL</span></span><br><span class="line">- (<span class="built_in">NSString</span> *) getCurrentURL;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//  获取标题</span></span><br><span class="line">- (<span class="built_in">NSString</span> *) getTitle;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//  获取图片</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *) getImgs;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//  获取当前页面所有链接</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *) getOnClicks;</span><br><span class="line"> </span><br><span class="line"><span class="preprocessor">#pragma mark -</span></span><br><span class="line"><span class="preprocessor">#pragma mark 改变网页样式和行为</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//  改变背景颜色</span></span><br><span class="line">- (<span class="keyword">void</span>) setBackgroundColor:(<span class="built_in">UIColor</span> *)color;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//  为所有图片添加点击事件(网页中有些图片添加无效)</span></span><br><span class="line">- (<span class="keyword">void</span>) addClickEventOnImg;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//  改变所有图像的宽度</span></span><br><span class="line">- (<span class="keyword">void</span>) setImgWidth:(<span class="keyword">int</span>)size;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//  改变所有图像的高度</span></span><br><span class="line">- (<span class="keyword">void</span>) setImgHeight:(<span class="keyword">int</span>)size;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//  改变指定标签的字体颜色</span></span><br><span class="line">- (<span class="keyword">void</span>) setFontColor:(<span class="built_in">UIColor</span> *) color withTag:(<span class="built_in">NSString</span> *)tagName;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//  改变指定标签的字体大小</span></span><br><span class="line">- (<span class="keyword">void</span>) setFontSize:(<span class="keyword">int</span>) size withTag:(<span class="built_in">NSString</span> *)tagName;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line">``` </span><br><span class="line"><span class="preprocessor">### 实现文件（UIWebView+HTML5.m）</span></span><br><span class="line"></span><br><span class="line">``` objc</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  UIWebView+HTML5.m</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by 杜子兮(duzixi) on 14-6-30.</span></span><br><span class="line"><span class="comment">//  Edited  by 杜子兮(duzixi) on 14-7-11. 修改网页图片显示大小</span></span><br><span class="line"><span class="comment">//                                       添加(jQuery)</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2014年 lanou3g.com 蓝鸥. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> </span><br><span class="line"><span class="preprocessor">#import <span class="title">"UIWebView+HTML5.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"UIColor+Change.h"</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIWebView</span> (<span class="title">JavaScript</span>)</span></span><br><span class="line"> </span><br><span class="line"><span class="preprocessor">#pragma mark -</span></span><br><span class="line"><span class="preprocessor">#pragma mark 获取网页中的数据</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//  获取某个标签的结点个数</span></span><br><span class="line">- (<span class="keyword">int</span>)nodeCountOfTag:(<span class="built_in">NSString</span> *)tag</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *jsString = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"document.getElementsByTagName('%@').length"</span>, tag];</span><br><span class="line">    <span class="keyword">int</span> len = [[<span class="keyword">self</span> stringByEvaluatingJavaScriptFromString:jsString] intValue];</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//  获取当前页面URL</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getCurrentURL</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> stringByEvaluatingJavaScriptFromString:<span class="string">@"document.location.href"</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//  获取标题</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getTitle</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> stringByEvaluatingJavaScriptFromString:<span class="string">@"document.title"</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//  获取所有图片链接</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)getImgs</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *arrImgURL = [[<span class="built_in">NSMutableArray</span> alloc] init];</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; [<span class="keyword">self</span> nodeCountOfTag:<span class="string">@"img"</span>]; i++) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *jsString = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"document.getElementsByTagName('img')[%d].src"</span>, i];</span><br><span class="line">        [arrImgURL addObject:[<span class="keyword">self</span> stringByEvaluatingJavaScriptFromString:jsString]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrImgURL;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//  获取当前页面所有点击链接</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)getOnClicks</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *arrOnClicks = [[<span class="built_in">NSMutableArray</span> alloc] init];</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; [<span class="keyword">self</span> nodeCountOfTag:<span class="string">@"a"</span>]; i++) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *jsString = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"document.getElementsByTagName('a')[%d].getAttribute('onclick')"</span>, i];</span><br><span class="line">        <span class="built_in">NSString</span> *clickString = [<span class="keyword">self</span> stringByEvaluatingJavaScriptFromString:jsString];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, clickString);</span><br><span class="line">        [arrOnClicks addObject:clickString];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrOnClicks;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="preprocessor">#pragma mark -</span></span><br><span class="line"><span class="preprocessor">#pragma mark 改变网页样式和行为</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//  改变背景颜色</span></span><br><span class="line">- (<span class="keyword">void</span>)setBackgroundColor:(<span class="built_in">UIColor</span> *)color</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> * jsString = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"document.body.style.backgroundColor = '%@'"</span>,[color webColorString]];</span><br><span class="line">    [<span class="keyword">self</span> stringByEvaluatingJavaScriptFromString:jsString];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//  为所有图片添加点击事件(网页中有些图片添加无效,需要协议方法配合截取)</span></span><br><span class="line">- (<span class="keyword">void</span>)addClickEventOnImg</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; [<span class="keyword">self</span> nodeCountOfTag:<span class="string">@"img"</span>]; i++) &#123;</span><br><span class="line">        <span class="comment">//利用重定向获取img.src，为区分，给url添加'img:'前缀</span></span><br><span class="line">        <span class="built_in">NSString</span> *jsString = [<span class="built_in">NSString</span> stringWithFormat:</span><br><span class="line">            <span class="string">@"document.getElementsByTagName('img')[%d].onclick = \</span><br><span class="line">              function() &#123; document.location.href = 'img' + this.src; &#125;"</span>,i];</span><br><span class="line">        [<span class="keyword">self</span> stringByEvaluatingJavaScriptFromString:jsString];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//  改变所有图像的宽度</span></span><br><span class="line">- (<span class="keyword">void</span>) setImgWidth:(<span class="keyword">int</span>)size</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; [<span class="keyword">self</span> nodeCountOfTag:<span class="string">@"img"</span>]; i++) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *jsString = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"document.getElementsByTagName('img')[%d].width = '%d'"</span>, i, size];</span><br><span class="line">        [<span class="keyword">self</span> stringByEvaluatingJavaScriptFromString:jsString];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//  改变所有图像的高度</span></span><br><span class="line">- (<span class="keyword">void</span>) setImgHeight:(<span class="keyword">int</span>)size</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; [<span class="keyword">self</span> nodeCountOfTag:<span class="string">@"img"</span>]; i++) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *jsString = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"document.getElementsByTagName('img')[%d].height = '%d'"</span>, i, size];</span><br><span class="line">        [<span class="keyword">self</span> stringByEvaluatingJavaScriptFromString:jsString];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//  改变指定标签的字体颜色</span></span><br><span class="line">- (<span class="keyword">void</span>)setFontColor:(<span class="built_in">UIColor</span> *)color withTag:(<span class="built_in">NSString</span> *)tagName</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *jsString = [<span class="built_in">NSString</span> stringWithFormat:</span><br><span class="line">        <span class="string">@"var nodes = document.getElementsByTagName('%@'); \</span><br><span class="line">          for(var i=0;i&lt;nodes.length;i++)&#123;\</span><br><span class="line">              nodes[i].style.color = '%@';&#125;"</span>, tagName, [color webColorString]];</span><br><span class="line">    [<span class="keyword">self</span> stringByEvaluatingJavaScriptFromString:jsString];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//  改变指定标签的字体大小</span></span><br><span class="line">- (<span class="keyword">void</span>)setFontSize:(<span class="keyword">int</span>)size withTag:(<span class="built_in">NSString</span> *)tagName</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *jsString = [<span class="built_in">NSString</span> stringWithFormat:</span><br><span class="line">        <span class="string">@"var nodes = document.getElementsByTagName('%@'); \</span><br><span class="line">          for(var i=0;i&lt;nodes.length;i++)&#123;\</span><br><span class="line">              nodes[i].style.fontSize = '%dpx';&#125;"</span>, tagName, size];</span><br><span class="line">    [<span class="keyword">self</span> stringByEvaluatingJavaScriptFromString:jsString];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>原文出处:<a href="http://blog.csdn.net/duzixi/article/details/36047201">http://blog.csdn.net/duzixi/article/details/36047201</a></p>
<p>对于不少iOS开发者来说，HTML5的内容比较陌生。尤其是UIWebView类的 <em>stringByEvaluatingJavaScriptFromString</em> 方法让很多人觉得又得学一种新的语言。而这一部分也是项目中学生常问的问题之一。本文以Category（类目）的方式扩展了UIWebView类，将一些常用的JavaScript操作封装成UIWebView类方法。<br>]]>
    
    </summary>
    
      <category term="iOS开发" scheme="http://blog.idukemou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅析Objective-C中的可变参数]]></title>
    <link href="http://blog.idukemou.com/2014/08/07/2014-08-24-objc-var-arguments/"/>
    <id>http://blog.idukemou.com/2014/08/07/2014-08-24-objc-var-arguments/</id>
    <published>2014-08-07T00:00:00.000Z</published>
    <updated>2015-03-05T05:00:46.000Z</updated>
    <content type="html"><![CDATA[<p>在Cocoa-Foundation框架中，不难发现如下带有可变参数的方法声明，例如：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (instancetype)initWithObjects:(<span class="keyword">id</span>)firstObj, ...;</span><br><span class="line">+ (instancetype)arrayWithObjects:(<span class="keyword">id</span>)firstObj, ...;</span><br></pre></td></tr></table></figure></p>
<p>在实际项目开发中，也许我们也会遇到需要可变参数列表的方法做支撑。我们都知道Objective-C以C为语言基础，事实上，这种带有可变参数列表的方法声明与实现正是归功于C语言。<br><a id="more"></a><br>下面以一个简单的示例说明:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)foo:(<span class="keyword">id</span>)firstObj, ... &#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *array = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="built_in">NSString</span> *argument;</span><br><span class="line">    va_list argList;</span><br><span class="line">    <span class="keyword">if</span>(firstObj)</span><br><span class="line">    &#123;</span><br><span class="line">        va_start(argList, firstObj);</span><br><span class="line">        <span class="keyword">while</span> ((argument = va_arg(argList, <span class="built_in">NSString</span>*)))</span><br><span class="line">        &#123;</span><br><span class="line">            [array addObject:argument];</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(argList);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">id</span> object <span class="keyword">in</span> array) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可变参数列表以nil作为结束标志:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span> foo:<span class="string">@"start:"</span>,<span class="string">@"Duke"</span>,<span class="string">@"Douglas"</span>,<span class="string">@"mou"</span>,<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure></p>
<p>下面就代码段中用的C方法一一说明:</p>
<ul>
<li>va_list argList定义一个指向个数可变的参数列表指针;</li>
<li>va_start(ap, param)param是第一个可选参数前的固定参数，va_start 使指针指向第一个可选参数;</li>
<li>va_arg(ap, type)返回参数列表中指针ap所指的参数，返回类型为type，并使指针ap指向参数列表中下一个参数;</li>
<li>va_end(ap) 清空参数列表，并置参数指针ap无效.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>在Cocoa-Foundation框架中，不难发现如下带有可变参数的方法声明，例如：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (instancetype)initWithObjects:(<span class="keyword">id</span>)firstObj, ...;</span><br><span class="line">+ (instancetype)arrayWithObjects:(<span class="keyword">id</span>)firstObj, ...;</span><br></pre></td></tr></table></figure></p>
<p>在实际项目开发中，也许我们也会遇到需要可变参数列表的方法做支撑。我们都知道Objective-C以C为语言基础，事实上，这种带有可变参数列表的方法声明与实现正是归功于C语言。<br>]]>
    
    </summary>
    
      <category term="iOS开发" scheme="http://blog.idukemou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[欢迎大家]]></title>
    <link href="http://blog.idukemou.com/2014/08/05/2013-07-10-welcome-to-jekll/"/>
    <id>http://blog.idukemou.com/2014/08/05/2013-07-10-welcome-to-jekll/</id>
    <published>2014-08-05T04:37:33.000Z</published>
    <updated>2014-10-09T11:58:58.000Z</updated>
    <content type="html"><![CDATA[<p>大家好，</p>
<p>　　欢迎来到我的博客，在这里我将跟大家探讨iOS开发过程中的点点滴滴！</p>
]]></content>
    <summary type="html">
    <![CDATA[欢迎来到我的博客，在这里我将跟大家探讨iOS开发过程中的点点滴滴！]]>
    
    </summary>
    
  </entry>
  
</feed>